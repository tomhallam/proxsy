{"version":3,"sources":["lib/Proxsy.js"],"names":[],"mappings":"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","file":"lib/Proxsy.js","sourcesContent":["const http = require('http');\nconst url = require('url');\nconst debug = require('debug')('proxsy:main');\nconst uuid = require('node-uuid');\nconst StringDecoder = require('string_decoder').StringDecoder;\nconst Stream = require('stream');\n\nimport {GenericTimer} from './Utils';\nimport {Request} from './Request';\n\nexport class Proxsy {\n\n  constructor() {\n    this.requests = [];\n  }\n\n  formatResult(request) {\n\n  }\n\n  handleRequest(req, res) {\n\n    // Create the request initialisation timer\n    const requestInitTimer = new GenericTimer('requestInit');\n    requestInitTimer.start();\n\n    // Ascertain the components of the url\n    var urlParts = url.parse(req.url);\n    debug('Requested URI Components: %o', urlParts);\n    debug('Headers: %o', req.headers);\n\n    var proxyParams = {\n      host: urlParts.hostname,\n      method: req.method,\n      path: urlParts.path,\n      headers: req.headers,\n      port: (urlParts.port ? urlParts.port : 80)\n    };\n\n    debug('Connecting to %s with params: %o', urlParts.hostname, proxyParams);\n\n    // Create the request id\n    let requestId = uuid.v4();\n\n    // Create the request in the registry\n    this.requests[requestId] = new Request(requestId);\n    var thisRequest = this.requests[requestId];\n\n    // Assign the request headers\n    thisRequest.setRequestHeaders(req.headers);\n\n    // Create the request timer\n    const requestTimer = new GenericTimer('request');\n    requestTimer.start();\n\n    // Set the request's init time\n    thisRequest.setInitTime(requestInitTimer.getValue());\n\n    const proxy = http.request(proxyParams, (proxyResult) => {\n\n      // Get TTFB\n      var ttfbTime = requestTimer.getValue();\n\n      // Set the returned headers to the Request object\n      thisRequest.setResponseHeaders(proxyResult.headers);\n\n      // Add the vanity header in, if it isn't going to overwrite an existing header\n      if(!proxyResult['X-Proxied-By']) {\n        proxyResult.headers['X-Proxied-By'] = `Proxsy ${require('../../package.json').version}`;\n      }\n\n      // Repeat the code and headers from the server\n      res.writeHead(proxyResult.statusCode, proxyResult.headers);\n\n      // For every chunk of data\n      proxyResult.on('data', (chunk) => {\n        thisRequest.addBodyChunk(chunk);\n        res.write(chunk);\n      })\n\n      // When all data has been downloaded\n      proxyResult.on('end', () => {\n\n        // Return the result to the calling socket\n        res.end();\n\n        //\n        let requestCompleteTime = requestTimer.getValue();\n        debug('Request completed in %dms', requestCompleteTime);\n        debug('Response body length: %db', thisRequest.response.length);\n        debug('Response headers: %o', proxyResult.headers);\n\n        thisRequest.setResponseTimes(ttfbTime, requestCompleteTime);\n        debug('Request Object: %o', thisRequest);\n\n        this.formatResult(thisRequest);\n\n      });\n\n    });\n\n    req.on('data', (chunk) => {\n      proxy.write(chunk);\n    });\n\n    req.on('end', () => {\n      proxy.end();\n    });\n\n  }\n\n}\n"],"sourceRoot":"/source/"}